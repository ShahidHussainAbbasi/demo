name: Build, Push and Pull images on DockerHub with docker compose

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: docker.io
  # REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }} 

jobs:

  build:

    runs-on: ubuntu-latest
    

    steps:
    - uses: actions/checkout@v4

      # Add support for more platforms with QEMU (optional)
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
        
      # By default, the docker-container driver will be used to be able to build multi-platform images and export cache using a BuildKit container.
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3           

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Build with Maven
      run: mvn -B package --file pom.xml -DskipTests
        # mvn clean install -DskipTests # Build your Spring Boot app

    - name: login to DockerHub
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{secrets.DOCKERHUB_USERNAME}}
        password: ${{secrets.DOCKERHUB_PASSWORD}}


    - name: Build Docker Compose services
      run: docker compose build

    - name: Push Docker Compose images to Docker Hub
      run: docker compose push 

    - name: check images before pull
      run: docker images

    - name: Pull Docker Compose images from Docker Hub
      run: docker compose pull 

    - name: check images after pull
      run: docker images

  deploy:
    runs-on: self-hosted
    steps:
      - name: check docker installation
        run: |
          if | [ -x "$(command -v docker)"]; then
           echo "Erro: Docker is not installed." >&2
           exit 1
          fi
      - name: pull image from docker hub
        run: sudo docker pull maxtheservice/demo:latest
      - name: delete existing container
        run: |
         if ["$(sudo docker ps -aq -f name=demo)" ]; then
           sudo docker rm -f demo
         fi
      - name: run demo container
        run: sudo docker run -p 8080:8080 --name demo --network demo maxtheservice/demo:latest



















  # deploy:
  #     needs: build
  #     runs-on: self-hosted
  #     steps:
  #       - name: Check Docker Installation
  #         run: |
  #           if ! [ -x "$(command -v docker)" ]; then
  #             echo "Error: Docker is not installed." >&2
  #             exit 1
  #           fi
  #       - name: Pull image from docker hub
  #         run: sudo docker pull maxtheservice/demo:latest
  #       - name: Delete existing container
  #         run: |
  #           if [ "$(sudo docker ps -aq -f name=demo)" ]; then
  #             sudo docker rm -f demo
  #           fi
  #       # - name: Remove all containers
  #       # docker container prune -f
  #       # - name: Run mysql container
  #         # run: sudo docker run --name mysqldb 
  #         # -e MYSQL_ROOT_USER=root -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABSE=demodb 
  #         # -p 3306:3306 --network demo mysql:8.0
  #       - name: Run demo container
  #         run: sudo docker run -p 8080:8080 --name demo --network demo maxtheservice/demo:latest
      
        

      # - name: build the docker image method 1
    #   id: build-docker-image
    #   run: |
    #     ls -la 
    #     docker build . -f Dockerfile -t maxtheservice/demo:latest
    # - name: push the docker image
    #   id: push-docker-image
    #   run: docker push ${{secrets.DOCKERHUB_USERNAME}}/demo:latest

    # - name: Build and Push to DockerHub method 2
    #   uses: docker/build-push-action@v6
    #   with:
    #     context: .
    #     push: true
    #     labels: ${{ steps.meta.outputs.labels }}   
    #     tags: maxtheservice/demo:latest


    # - name: Extract metadata (tags, labels) for Docker
    #   id: meta
    #   uses: docker/metadata-action@v5
    #   with:
    #        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}


    # - name: Inspect
    #   run: |
    #     docker image inspect maxtheservice/demo:latest      








































    # - name: check images before pull
    #   run: docker images

    # - name: pull the image
    #   run: docker pull maxtheservice/demo:latest

    # - name: check images after pull
    #   run: docker images

    # - name: remove all services
    #   run: docker compose down --rmi all # remove all containers

    # - name: Run Docker Container
    #   run: docker run -p 8080:80 --name demo-container maxtheservice/demo:latest      

    # - name: check containers
    #   run: docker ps

    # - name: remove all services
    #   run: docker compose down --rmi all # remove all containers

    # - name: Start Docker Compose services
    #   run: docker compose up --build # Build and start containers
    # # - name: Wait for MySQL to be ready
    # #   run: |
    # #     for i in $(seq 1 10); do
    # #       docker-compose exec mysql mysqladmin ping -h localhost --silent && break
    # #       echo "Waiting for MySQL..."
    # #       sleep 5
    # #     done
    # - name: Run integration tests
    #   run: mvn test # Run tests against the running services
    # - name: Stop Docker Compose services
    #   run: docker-compose down
